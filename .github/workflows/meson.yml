name: Meson Build (Linux, macOS)

on:
  # Triggers the workflow when manually dispatched
  workflow_dispatch:
    inputs:
      upload_artefacts:
        description: "Upload build artefacts"
        type: boolean
        required: false
        default: false
      build_type:
        description: "Build Configuration"
        type: choice
        required: false
        default: "release"
        options:
          - "release"
          - "debug"
      debug_level:
        description: "Debug Level"
        type: choice
        required: false
        default: "release"
        options:
          - "release"
          - "minimal"
          - "full"

  # Triggers the workflow when called by a top-level workflow
  workflow_call:
    inputs:
      upload_artefacts:
        type: boolean
        required: false
        default: false
      build_type: # "release" | "debug"
        type: string
        required: false
        default: "release"
      debug_level:  # "full" | "minimal" | "release" 
        type: string
        required: false
        default: "release"

env: 
  MESON_VERSION: "0.60.3"

jobs:
  build-linux:

    runs-on: ubuntu-latest
    name: Linux Build

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3

      - name: Install Dependencies
        run: |
          sudo apt-get update -yq
          sudo apt-get install --no-install-recommends wget liballegro4-dev libloadpng4-dev libflac++-dev luajit-5.1-dev liblua5.2-dev libminizip-dev liblz4-dev libpng++-dev libx11-dev libboost-dev libtbb-dev libsdl2-dev libopengl-dev libfuse2 ninja-build
          sudo pip install meson==${{env.MESON_VERSION}}

      - name: Setup Meson
        env:
          CC: "gcc"
          CXX: "g++"
        run: |
          meson setup --buildtype=${{inputs.build_type}} -Ddebug_type=${{inputs.debug_level}} build

      - name: Configure for AppImage
        if: ${{inputs.upload_artefacts}}
        env:
          CC: "gcc"
          CXX: "g++"
        run: meson configure -Dinstall_data=false -Dinstall_runner=false -Dfmod_dir=/usr/lib/ --prefix=/usr/ build
          
      - name: Build
        env:
          CC: "gcc"
          CXX: "g++"
        run: |
          meson compile -C build
        
      - name: Create AppDir
        if: ${{inputs.upload_artefacts}}
        run: |
          echo "Setting output prefix"
          DESTDIR=${GITHUB_WORKSPACE}/build/AppDir meson install -C $GITHUB_WORKSPACE"/build"

      - name: Download linuxdeploy
        if: ${{inputs.upload_artefacts}}
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage -O lindeploy
          chmod +x lindeploy

      - name: Create AppImage
        if: ${{inputs.upload_artefacts}}
        working-directory: ${{env.GITHUB_WORKSPACE}}
        env:
          LD_LIBRARY_PATH: ./external/lib/linux/x86_64/
          OUTPUT: CortexCommand.AppImage
        run: |
          echo ${LD_LIBRARY_PATH}
          ./lindeploy --appdir=build/AppDir --output appimage

      - name: Upload Appimage
        if: ${{inputs.upload_artefacts}}
        uses: actions/upload-artifact@v3
        with:
          name: CortexCommand (Linux)
          path: CortexCommand.AppImage
          if-no-files-found: error

  build-macos:
    runs-on: macos-latest
    name: MacOS Build

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3

      - name: Install Dependencies
        run: |
          brew install pkg-config tbb sdl2 minizip lz4 flac luajit lua@5.1 libpng gcc@12 ninja meson
          
      - name: Build
        env:
          CC: "gcc-12"
          CXX: "g++-12"
          LDFLAGS: "-static-libgcc -static-libstdc++"
        run: |
          meson setup --buildtype=${{inputs.build_type}} -Ddebug_type=${{inputs.debug_level}}  build
          meson compile -C build

      - name: Artifact Deploy
        if: ${{inputs.upload_artefacts}}
        uses: actions/upload-artifact@v3
        with:
          name: CortexCommand (macOS)
          path: |
            build/CortexCommand
            build/CortexCommand_debug
          if-no-files-found: error
