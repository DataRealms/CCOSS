.\" Generated by the Allegro makedoc utility
.TH exsprite 3 "version 4.4.3" "Allegro" "Allegro manual"
.SH NAME
exsprite \- Datafiles access and sprite animation. Allegro game programming library.\&
.SH SYNOPSIS
.B #include <allegro.h>

.sp
.B Example exsprite
.SH DESCRIPTION
This example demonstrates how to use datafiles, various sprite
drawing routines and flicker-free animation.

Why is the animate() routine coded in that way?  As you
probably know, VIDEO RAM is much slower than "normal"
RAM, so it's advisable to reduce VRAM blits to a minimum.
Drawing sprite on the screen (meaning in VRAM) and then
clearing a background for it is not very fast. This example
uses a different method which is much faster, but require a
bit more memory.

First the buffer is cleared (it's a normal BITMAP), then the
sprite is drawn on it, and when the drawing is finished this
buffer is copied directly to the screen. So the end result is
that there is a single VRAM blit instead of blitting/clearing
the background and drawing a sprite on it.  It's a good method
even when you have to restore the background. And of course,
it completely removes any flickering effect.

When one uses a big (ie. 800x600 background) and draws
something on it, it's wise to use a copy of background
somewhere in memory and restore background using this
"virtual background". When blitting from VRAM in SVGA modes,
it's probably, that drawing routines have to switch banks on
video card. I think, I don't have to remind how slow is it.

Note that on modern systems, the above isn't true anymore, and
you usually get the best performance by caching all your
animations in video ram and doing only VRAM->VRAM blits, so
there is no more RAM->VRAM transfer at all anymore. And usually,
such transfers can run in parallel on the graphics card's
processor as well, costing virtually no main cpu time at all.
See the exaccel example for an example of this.

.SH SEE ALSO
.BR BITMAP (3),
.BR DATAFILE (3),
.BR END_OF_FUNCTION (3),
.BR END_OF_MAIN (3),
.BR LOCK_FUNCTION (3),
.BR LOCK_VARIABLE (3),
.BR SCREEN_H (3),
.BR SCREEN_W (3),
.BR allegro_error (3),
.BR allegro_init (3),
.BR allegro_message (3),
.BR blit (3),
.BR circle (3),
.BR clear_bitmap (3),
.BR clear_keybuf (3),
.BR create_bitmap (3),
.BR destroy_bitmap (3),
.BR draw_sprite (3),
.BR draw_sprite_h_flip (3),
.BR draw_sprite_v_flip (3),
.BR draw_sprite_vh_flip (3),
.BR fixed (3),
.BR font (3),
.BR hline (3),
.BR install_int_ex (3),
.BR install_keyboard (3),
.BR install_sound (3),
.BR install_timer (3),
.BR itofix (3),
.BR key (3),
.BR keypressed (3),
.BR load_datafile (3),
.BR makecol (3),
.BR palette_color (3),
.BR pivot_sprite (3),
.BR pivot_sprite_v_flip (3),
.BR play_sample (3),
.BR rectfill (3),
.BR replace_filename (3),
.BR rest (3),
.BR screen (3),
.BR set_gfx_mode (3),
.BR set_palette (3),
.BR text_height (3),
.BR textout_centre_ex (3),
.BR unload_datafile (3),
.BR vsync (3)
