.\" Generated by the Allegro makedoc utility
.TH hook_config_section 3 "version 4.4.3" "Allegro" "Allegro manual"
.SH NAME
hook_config_section \- Hooks a configuration file section with custom handlers. Allegro game programming library.\&
.SH SYNOPSIS
.B #include <allegro.h>

.sp
.B void hook_config_section(const char *section,
.B int (*intgetter)(const char *name, int def),
.B const char *(*stringgetter)(const char *name, const char *def),
.B void (*stringsetter)(const char *name, const char *value));
.SH DESCRIPTION
Takes control of the specified config file section, so that your hook 
functions will be used to manipulate it instead of the normal disk file 
access. If both the getter and setter functions are NULL, a currently 
present hook will be unhooked. Hooked functions have the highest 
priority. If a section is hooked, the hook will always be called, so you 
can also hook a '#' section: even override_config_file() cannot override 
a hooked section. Example:

.nf
   int decode_encrypted_int(const char *name, int def)
   {
      ...
   }
   
   const char *decode_encrypted_string(const char *name, const char *def)
   {
      ...
   }
   
   void encode_plaintext_string(const char *name, const char *value)
   {
      ...
   }
   
   int main(int argc, char *argv[])
   {
      ...
      /* Make it harder for users to tinker with the high scores. */
      hook_config_section("high_scores", decode_encrypted_int,
         decode_encrypted_string, encode_plaintext_string);
      ...
   } END_OF_MAIN()
.fi

.SH SEE ALSO
.BR config_is_hooked (3)
