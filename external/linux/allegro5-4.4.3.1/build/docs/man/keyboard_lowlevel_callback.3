.\" Generated by the Allegro makedoc utility
.TH keyboard_lowlevel_callback 3 "version 4.4.3" "Allegro" "Allegro manual"
.SH NAME
keyboard_lowlevel_callback \- User specified low level keyboard event handler. Allegro game programming library.\&
.SH SYNOPSIS
.B #include <allegro.h>

.sp
.B extern void (*keyboard_lowlevel_callback)(int scancode);
.SH DESCRIPTION
If set, this function is called by the keyboard handler in response to 
every keyboard event, both presses (including keyboard repeat rate) and
releases. It will be passed a raw keyboard scancode byte (scancodes are
7 bits long), with the top bit (8th bit) clear if the key has been
pressed or set if it was released. This routine executes in an interrupt
context, so it must be in locked memory. Example:

.nf
   volatile int key_down, key_up;
   
   void keypress_watcher(int scancode)
   {
      if (scancode & 0x80) {
         key_up = 1;
      } else {
         key_down = 1;
      }
   } END_OF_FUNCTION(keypress_watcher)
   
   ...
   
      install_timer();
      LOCK_FUNCTION(silence_g_key);
      LOCK_VARIABLE(key_down);
      LOCK_VARIABLE(key_up);
      install_keyboard();
      keyboard_lowlevel_callback = keypress_watcher;
      /* Disable keyboard repeat to get typewriter effect. */
      set_keyboard_rate(0, 0);
   
   ...
   
      while (game_loop) {
         if (key_down) {
            key_down = 0;
            /* Play sample of typewriter key press. */
         }
         if (key_up) {
            key_up = 0;
            /* Play sample of typewriter key release. */
         }
      }
.fi

.SH SEE ALSO
.BR install_keyboard (3),
.BR keyboard_callback (3),
.BR keyboard_ucallback (3),
.BR exkeys (3)
