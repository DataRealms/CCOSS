.\" Generated by the Allegro makedoc utility
.TH set_uformat 3 "version 4.4.3" "Allegro" "Allegro manual"
.SH NAME
set_uformat \- Set the global current text encoding format. Allegro game programming library.\&
.SH SYNOPSIS
.B #include <allegro.h>

.sp
.B void set_uformat(int type);
.SH DESCRIPTION
Sets the current text encoding format. This will affect all parts of 
Allegro, wherever you see a function that returns a char *, or takes a 
char * as a parameter. `type' should be one of these values:

.nf
   U_ASCII     - fixed size, 8-bit ASCII characters
   U_ASCII_CP  - alternative 8-bit codepage (see set_ucodepage())
   U_UNICODE   - fixed size, 16-bit Unicode characters
   U_UTF8      - variable size, UTF-8 format Unicode characters
   
.fi
Although you can change the text format on the fly, this is not a good 
idea. Many strings, for example the names of your hardware drivers and 
any language translations, are loaded when you call allegro_init(), so if 
you change the encoding format after this, they will be in the wrong 
format, and things will not work properly. Generally you should only call 
set_uformat() once, before allegro_init(), and then leave it on the same 
setting for the duration of your program.

.SH SEE ALSO
.BR get_uformat (3),
.BR register_uformat (3),
.BR set_ucodepage (3),
.BR set_uformat (3),
.BR uconvert (3),
.BR ustrsize (3),
.BR ugetc (3),
.BR ugetx (3),
.BR usetc (3),
.BR uwidth (3),
.BR ucwidth (3),
.BR uisok (3),
.BR uoffset (3),
.BR ugetat (3),
.BR usetat (3),
.BR uinsert (3),
.BR uremove (3),
.BR allegro_init (3),
.BR exunicod (3)
