.\" Generated by the Allegro makedoc utility
.TH draw_sprite 3 "version 4.4.3" "Allegro" "Allegro manual"
.SH NAME
draw_sprite \- Draws a copy of the sprite onto the destination bitmap. Allegro game programming library.\&
.SH SYNOPSIS
.B #include <allegro.h>

.sp
.B void draw_sprite(BITMAP *bmp, BITMAP *sprite, int x, int y);
.SH DESCRIPTION
Draws a copy of the sprite bitmap onto the destination bitmap at the 
specified position. This is almost the same as blit(sprite, bmp, 0, 0, x, 
y, sprite->w, sprite->h), but it uses a masked drawing mode where 
transparent pixels are skipped, so the background image will show through 
the masked parts of the sprite. Transparent pixels are marked by a zero 
in 256-color modes or bright pink for truecolor data (maximum red and 
blue, zero green). Example:

.nf
   BITMAP *spaceship;
   ...
   draw_sprite(screen, spaceship, x, y);
.fi

If the GFX_HW_VRAM_BLIT_MASKED bit in the gfx_capabilities flag is set, 
the current driver supports hardware accelerated sprite drawing when the 
source image is a video memory bitmap or a sub-bitmap of the screen. This 
is extremely fast, so when this flag is set it may be worth storing some 
of your more frequently used sprites in an offscreen portion of the video 
memory.

Warning: if the hardware acceleration flag is not set, draw_sprite() will 
not work correctly when used with a sprite image in system or video 
memory so the latter must be a memory bitmap.

Although generally not supporting graphics of mixed color depths, as a 
special case this function can be used to draw 256-color source images 
onto truecolor destination bitmaps, so you can use palette effects on 
specific sprites within a truecolor program.

.SH SEE ALSO
.BR draw_sprite_v_flip (3),
.BR draw_trans_sprite (3),
.BR draw_lit_sprite (3),
.BR draw_gouraud_sprite (3),
.BR stretch_sprite (3),
.BR rotate_sprite (3),
.BR draw_character_ex (3),
.BR draw_rle_sprite (3),
.BR draw_compiled_sprite (3),
.BR masked_blit (3),
.BR blit (3),
.BR bitmap_mask_color (3),
.BR exsprite (3)
