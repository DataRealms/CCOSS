.\" Generated by the Allegro makedoc utility
.TH exlights 3 "version 4.4.3" "Allegro" "Allegro manual"
.SH NAME
exlights \- One way to do colored lighting effects in a hicolor video mode. Allegro game programming library.\&
.SH SYNOPSIS
.B #include <allegro.h>

.sp
.B Example exlights
.SH DESCRIPTION
This program shows one way to implement colored lighting effects
in a hicolor video mode. Warning: it is not for the faint of heart!
This is by no means the simplest or easiest to understand method,
I just thought it was a cool concept that would be worth
demonstrating.

The basic approach is to select a 15 or 16 bit screen mode, but
then draw onto 24 bit memory bitmaps. Since we only need the bottom
5 bits of each 8 bit color in order to store 15 bit data within a
24 bit location, we can fit a light level into the top 3 bits.
The tricky bit is that these aren't actually 24 bit images at all:
they are implemented as 8 bit memory bitmaps, and we just store the
red level in one pixel, green in the next, and blue in the next,
making the total image be three times wider than we really wanted.
This allows us to use all the normal 256 color graphics routines
for drawing onto our memory surfaces, most importantly the lookup
table translucency, which can be used to combine the low 5 bits
of color and the top 3 bits of light in a single drawing operation.
Some trickery is needed to load 24 bit data into this fake 8 bit
format, and of course it needs a custom routine to convert the
resulting image while copying it across to the hardware screen.

This program chugs slightly on my p133, but not significantly
worse than any double buffering in what amounts to a 1920x640,
256 color resolution. The light blending doesn't seem to slow
it down too badly, so I think this technique would be quite usable
on faster machines and in lower resolution hicolor modes. The
biggest problem is that although you keep the full 15 bit color
resolution, you only get 3 bits of light, ie. 8 light levels.
You can do some nice colored light patches, but smooth gradients
aren't going to work too well :-)

.SH SEE ALSO
.BR BITMAP (3),
.BR COLOR_MAP (3),
.BR END_OF_MAIN (3),
.BR PALETTE (3),
.BR SCREEN_H (3),
.BR SCREEN_W (3),
.BR allegro_error (3),
.BR allegro_init (3),
.BR allegro_message (3),
.BR bitmap_color_depth (3),
.BR blit (3),
.BR bmp_unwrite_line (3),
.BR bmp_write_line (3),
.BR circlefill (3),
.BR clear_bitmap (3),
.BR clear_keybuf (3),
.BR color_map (3),
.BR create_bitmap_ex (3),
.BR destroy_bitmap (3),
.BR draw_trans_sprite (3),
.BR fixatan2 (3),
.BR fixsqrt (3),
.BR fixtoi (3),
.BR getb_depth (3),
.BR getg_depth (3),
.BR getpixel (3),
.BR getr_depth (3),
.BR hsv_to_rgb (3),
.BR install_keyboard (3),
.BR install_mouse (3),
.BR install_timer (3),
.BR itofix (3),
.BR key (3),
.BR keypressed (3),
.BR line (3),
.BR load_bitmap (3),
.BR makecol (3),
.BR mouse_x (3),
.BR mouse_y (3),
.BR poll_mouse (3),
.BR replace_filename (3),
.BR retrace_count (3),
.BR screen (3),
.BR select_palette (3),
.BR set_color_conversion (3),
.BR set_color_depth (3),
.BR set_gfx_mode (3)
